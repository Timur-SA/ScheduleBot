from aiogram import Router
from aiogram.fsm.state import State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
import re
from datetime import datetime
import data, keyboards as kb, reminders
from botInstance import bot
router = Router()
deleteState = State()


def getEventsbyDay(deltaDays=0):
    events = data.getDayData(data.loadGlobalFile(), deltaDays)
    if events:
        return "\n".join(["üìù –°–æ–±—ã—Ç–∏—è:", data.prepareDayMessage(events)])
    else:
        return "üìù –°–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"

def getNotificationsbyDay(uid, deltaDays=0):
    notifications = data.getDayData(data.loadLocalFile(uid), deltaDays)
    if notifications:
        return "\n".join(["üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", data.prepareDayMessage(notifications)])
    else:
        return "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"


@router.callback_query(lambda q: q.data == 'accept')
async def accept(cq: CallbackQuery, state: FSMContext):
    stateData = await state.get_data()
    delDate = stateData.get("date")
    delTime = stateData.get("time")

    data.deleteNotification([delDate, delTime], cq.from_user.id)
    await cq.message.edit_text('üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
    await state.clear()

@router.callback_query(lambda q: q.data == 'deny')
async def accept(cq: CallbackQuery, state: FSMContext):
    await cq.message.edit_text('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
    await state.clear()


@router.message(CommandStart())
async def start(msg: Message):
    events = data.getEvents(data.loadGlobalFile())
    await msg.reply(f"–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á\n–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã /help –∏ /schedule, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")
    for event in events:
        reminders.scheduleReminder(msg.chat.id, datetime.fromisoformat(f"{event['day']}T{event['time']}"), [1], notification, "üìù –°–∫–æ—Ä–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Å–æ–±—ã—Ç–∏–µ!", "üìù –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!", event["name"]) 


@router.message(Command("today"))
async def today(msg: Message):
    await msg.answer(getEventsbyDay())
    await msg.answer(getNotificationsbyDay(msg.from_user.id))
    
@router.message(Command("tomorrow"))
async def tomorrow(msg: Message):
    await msg.answer(getEventsbyDay(deltaDays=1))
    await msg.answer(getNotificationsbyDay(msg.from_user.id, deltaDays=1))

@router.message(Command("week"))
async def week(msg: Message): pass


@router.message(Command("add"))
async def add(msg: Message):
    if(re.match(r"^/add (.+?) (\d{4}-\d{2}-\d{2}) (\d{2}:\d{2})$", msg.text)):
        args = msg.text.split()[1:]
        status = data.writeNotification(args, msg.from_user.id)

        if(status=="OK"): 
            await msg.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            reminders.scheduleReminder(msg.chat.id, datetime.fromisoformat(f"{args[-2]}T{args[-1]}"), [1], notification, "üîî –°–∫–æ—Ä–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!", "üîî –°—Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!", " ".join(args[:-2]))

        elif(status=="replacement"): 
            await msg.answer("üîÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")
            reminders.scheduleReminder(msg.chat.id, datetime.fromisoformat(f"{args[-2]}T{args[-1]}"), [1], notification, "üîî –°–∫–æ—Ä–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!", "üîî –°—Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!", " ".join(args[:-2]))

        
        elif(status=="unactual"): await msg.answer("üòÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ")
        else: raise RuntimeError("Status invalid")

    else:
        await msg.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        await msg.answer("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: `/add –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ì–ì–ì–ì-–ú–ú-–î–î —á—á:–º–º` üëà", parse_mode="markdown")

@router.message(Command("del", "delete"))
async def delete(msg: Message, state = FSMContext):
    if(re.match(r"^/del (\d{4}-\d{2}-\d{2}) (\d{2}:\d{2})$", msg.text)):
        args = msg.text.split()[1:]
        status, notificationName = data.findNotification(msg.from_user.id, args[0], args[1])

        if(status):
            await state.set_state(deleteState)
            await state.update_data(date=args[0], time=args[1])

            await msg.answer(f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {notificationName}?", reply_markup=kb.approvalKB)
        else:
            await msg.answer("‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥—ë–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞!")
    else:
        await msg.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        await msg.answer("–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: `/del –ì–ì–ì–ì-–ú–ú-–î–î —á—á:–º–º` üëà", parse_mode="markdown")


@router.message(Command("help"))
async def help(msg: Message):
    await msg.reply(f"""/today - –í—ã–≤–µ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - –í—ã–≤–µ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/week - –í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
/add - –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ (`/add [–ù–∞–∑–≤–∞–Ω–∏–µ] <–ì–ì–ì–ì-–ú–ú-–î–î> <—á—á:–º–º>` üëà)
/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ 
/schedule - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ /add (–¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ)""",
parse_mode="markdown")

@router.message(Command("schedule"))
async def schedule(msg: Message):
    await msg.reply(f"-–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n/add (–ù–∞–∑–≤–∞–Ω–∏–µ) (–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–ì–ì–ì–ì-–ú–ú-–î–î>) (–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—á—á:–º–º>)\n–ü—Ä–∏–º–µ—Ä: `/add –í–∞—à–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!ü•≥ 2025-07-31 15:00` üëà", parse_mode="markdown")


async def notification(cid, notificationTime, msgText, notificationName):
    await bot.send_message(cid, f"{msgText}\n{notificationTime} - {notificationName}")